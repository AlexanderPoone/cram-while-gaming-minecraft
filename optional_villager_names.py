'''
Copyleft Alexander Poone 2024 Edutainment.

Learn languages by checking out Minecraft villager names. Requires the `Villager Names` mod by Serilum: https://www.curseforge.com/minecraft/mc-mods/villager-names

e.g., on Windows, folder containing replaced file (replace 1.21 w/ any version) is:    %USERPROFILE%/curseforge/minecraft/Instances/1.21/config/collective
'''

from json import dumps
from os.path import expanduser
from re import sub

OUT = {                         # Customise for your own needs. This works like flashcards, content can be Incoterms, Docker commands or whatever.
    "female_names": [
        # "La m`ouette",
        # "Une autruche",
        # "La luciole",
        # "La girafe - originaire d'Afrique",
        # "La limace",
        # "La puce",
        # "U{ne an}guille électrique",
        # "Sarah Bernhardt - La Voi<x> d'or",
        # "Surya Bonaly - patineuse artistique",
    ],
    "male_names": [
'-> std::io::Result<()>',
# '#[tokio::main]',
'#[tokio::main(flavor = "multi_thread", worker_threads = 4)]',
'#[actix_web::main]',
'#[derive(Debug)]',
'#[derive(Clone)]',
'#[derive(Copy)]',
'#[derive(serde::Deserialize)]',
'#[derive(serde::Serialize)]',
'#[cfg(test)] Compile and run the test code only when you run `cargo test`, not when you run `cargo build`.',
'#[cfg(target_os = "linux")]',
'#[test]',
'#[should_panic]',
'#[pyclass] A proc macro used to expose Rust structs and fieldless enums as Python objects.',
'#[pyfunction] A proc macro used to expose Rust functions to Python.',
'#[pymodule] A proc macro used to implement Python modules.',
'#[pymethods] A proc macro used to expose methods to Python.',
# '#[new]',
'#[pyo3(get, set)]',
'pyo3::types::PyDict::new();',
'pub mod new_user;',
'actix_web::HttpServer::new(|| {})',
'actix_web::HttpResponse::Unauthorized().finish()',
'return actix_web::HttpResponse::NotFound().await.unwrap();',
'let (tx, mut rx) = tokio::sync::broadcast::channel(16);',
'let (tx, mut rx) = tokio::sync::mpsc::channel::<myMsg>(1);',
'let (send, recv) = tokio::sync::oneshot::channel();',
'let mut rng = rand::thread_rng();',
'let args = std::env::args().collect();',
'let now = chrono::Utc::now().naive_local();',
'let emptyStr = String::new();',
'diesel::insert_into(myTbl).values(myPost).execute(myConn);',
'let mut f = std::fs::File::create("f.txt").unwrap();',
'let f = std::fs::File::open("f.txt").unwrap();',
'println!("{}", outcome); println!("{outcome}");',
'eprintln!("server error: {}", e) ;',
'tokio::spawn(async move {})',
'let two = one.to_owned() + " two";',
'let now = std::time::Instant::now(); println!("{:?}", now.elapsed());',
'let mut buffer = Vec::with_capacity(10);',
'let numbers = vec![1, 2, 3];',
'for i in myVec.iter() {}',
'let y = loop { x *= 10; if x > value { break x / 10; } };',
'panic!("This should not occur")',
'Err(_) => ()',
'impl Stock { fn new() -> Stock { return Stock{} } }',
'loop { yield myFoobar; }',
'let mut map = HashMap::new(); map.insert("one", 1);',
'Ok(())',
'Ok((a + b).to_string())',
'Celery is written in Python',
'from celery import Celery; app = Celery(\'hello\', broker=\'amqp://guest@localhost//\')',
'> cargo doc --open',
'PlSmallStr::from_string(name)',
'let file = std::fs::File::open("../foods1.csv").unwrap();',
'let file = Box::new(file) as Box<dyn MmapBytesReader>;',
'let res = JsonReader::new(std::io::Cursor::new(data)).finish();',
'oneshot, mpsc, watch, broadcast',
'actix_web::rt::spawn(async move {',
'App::new().app_data(counter.clone())',
'App::new().app_data(web::Data::new(AppState { app_name: String::from("Actix Web"), }))',
'App::new().service(fs::Files::new("/static", ".").show_files_listing())',
'HttpResponse::Ok().content_type("application/json").streaming(body)',
'HttpResponse::Ok().content_type(ContentType::json()).body(body)',
'httpServer.bind_openssl(("127.0.0.1", 8080))?',
'resp.head_mut()',
# '[Shield, SYN SYN-ACK ACK] SYN flood (half-open attack) for TCP',
# '[Shield] UDP flood',
# '[Shield] DNS reflection (aka amplification) attack for UDP',
# '[GuardDuty] nmap Port Scanners',
#     'Amazon API Gateway',
# 'Amazon AppStream',
# 'Amazon Athena Federated Query',
# 'Amazon Aurora PostgreSQL',
# 'Amazon Aurora Serverless',
# 'Amazon CloudFormation',
# 'Amazon CloudFront',
# 'Amazon CloudTrail',
# 'Amazon CloudWatch Logs',
# 'Amazon Cognito',
# 'Amazon DocumentDB',
# 'Amazon DynamoDB Accelerator',
# 'Amazon EBS',
# 'Amazon EBS Snapshot',
# 'Amazon EC2 AMI',
# 'Amazon EC2 API',
# 'Amazon EC2 Auto Scaling',
# 'Amazon EC2 Container',
# 'Amazon EC2 Container Service',
# 'Amazon EC2 Instance',
# 'Amazon EC2 Instances',
# 'Amazon EC2 Linux',
# 'Amazon EC2 Security Groups',
# 'Amazon ECS',
# 'Amazon Elastic Beanstalk',
# 'Amazon Elastic Block Store Provisioned IOPs',
# 'Amazon Elastic Compute Cloud',
# 'Amazon Elastic Computer Cloud',
# 'Amazon Elastic Container Service',
# 'Amazon Elastic File System',
# 'Amazon Elastic Kubernetes Service',
# 'Amazon Elastic Load Balancing',
# 'Amazon Elastic MapReduce',
# 'Amazon ElastiCache',
# 'Amazon ELB',
# 'Amazon EMR Cluster',
# 'Amazon EventBridge',
# 'Amazon FSx',
# 'Amazon Glacier',
# 'Amazon Glacier Restore API',
# 'Amazon GuardDuty',
# 'Amazon HVM',
# 'Amazon Inspector',
# 'Amazon Instance',
# 'Amazon Kinesis Data Firehose',
# 'Amazon Kinesis Data Streams',
# 'Amazon Kinesis Video Streams',
# 'Amazon Linux',
# 'Amazon Machine Images',
# 'Amazon Macie',
# 'Amazon Managed Service',
# 'Amazon PV',
# 'Amazon QuickSight',
# 'Amazon RDS Custom',
# 'Amazon RDS DB',
# 'Amazon RDS Idle DB',
# 'Amazon RDS Oracle DB',
# 'Amazon RDS Provisioned IOPS',
# 'Amazon RDS Proxy',
# 'Amazon RDS Reserved Instance',
# 'Amazon RDS SQL Server',
# 'Amazon Redshift',
# 'Amazon Relational Database Service',
# 'Amazon Resource Names',
# 'Amazon Route 53',
# 'Amazon S3 Advertise',
# 'Amazon S3 API',
# 'Amazon S3 Configure',
# 'Amazon S3 File Gateway',
# 'Amazon S3 Generate',
# 'Amazon S3 REST',
# 'Amazon S3 Standard',
# 'Amazon S3 Storage Lens',
# 'Amazon S3 Transfer Acceleration',
# 'Amazon SES',
# 'Amazon Simple Email Service',
# 'Amazon Simple Notification Service',
# 'Amazon Simple Queue Service',
# 'Amazon Simple Storage Service',
# 'Amazon Simple Workflow',
# 'Amazon SNS',
# 'Amazon SQS',
# 'Amazon SWF',
# 'Amazon Virtual Private Cloud',
# 'Amazon VPC',
# 'AWS Acceptable Use',
# 'AWS Access Control Service',
# 'AWS Access Key',
# 'AWS AMI',
# 'AWS Amplify Hosting',
# 'AWS API',
# 'AWS Billing',
# 'AWS Budgets',
# 'AWS Certificate Manager',
# 'AWS CloudFormation Read Only',
# 'AWS CloudFront',
# 'AWS CloudHSM',
# 'AWS CloudTrail',
# 'AWS CloudWatch',
# 'AWS Compute Optimizer',
# 'AWS Config',
# 'AWS Consolidated Billing',
# 'AWS Control Tower',
# 'AWS Cost Anomaly Detection',
# 'AWS Cost Explorer',
# 'AWS Data Pipeline',
# 'AWS Database Migration Service',
# 'AWS DataSync',
# 'AWS DirectConnect',
# 'AWS Directory Service AD',
# 'AWS Directory Service Simple',
# 'AWS EC2',
# 'AWS Elastic Beanstalk',
# 'AWS ElastiCache',
# 'AWS Fargate',
# 'AWS Firewall Manager',
# 'AWS Glacier',
# 'AWS Global Accelerator',
# 'AWS Glue',
# 'AWS IAM',
# 'AWS Key Management Service',
# 'AWS KMS',
# 'AWS Lambda',
# 'AWS Management Console',
# 'AWS Marketplace',
# 'AWS Media Sharing Framework',
# 'AWS Migration Hub',
# 'AWS Mobile Communication',
# 'AWS Mobile Push',
# 'AWS Mobile Push EC2',
# 'AWS MySQL RDS',
# 'AWS NAT',
# 'AWS OpsWorks',
# 'AWS Organizations',
# 'AWS PrivateLink',
# 'AWS Regions',
# 'AWS Resource Access Manager',
# 'AWS Schema Conversion Tool',
# 'AWS Secrets Manager',
# 'AWS Security Hub',
# 'AWS Security Token Service',
# 'AWS Service Catalog',
# 'AWS Service Health',
# 'AWS Shield',
# 'AWS Shield Advanced',
# 'AWS Simple Email',
# 'AWS Simple Notification',
# 'AWS Simple Queue',
# 'AWS Simple Workflow',
# 'AWS Single Sign-On',
# 'AWS SSO',
# 'AWS Step Functions',
# 'AWS Storage Gateway',
# 'AWS Systems Manager Maintenance Windows',
# 'AWS Systems Manager Parameter',
# 'AWS Systems Manager Patch Manager',
# 'AWS Systems Manager Run Command',
# 'AWS Systems Manager Session Manager',
# 'AWS Trusted Advisor',
# 'AWS VPN',
# 'AWS WAF',
        # "Le pic",
        # "Le corbeau",
        # "Le moineau",
        # "Le martin-pêcheur",
        # "Le rouge-gorge",
        # "Le guépar<d>",
        # "Le léopar<d>",
        # "Le moustique",
        # "LE zèbre - originaire d'Afrique",
        # "Le phoque",
        # "Le lion de mer",
        # "L'épaular<d>",
        # "Le raton laveur",
        # "Le mendiant",
        # "L'escroc",
        # "Le flemmar<d>",
        # "Le paresseux",
        # "Le casse-cou"
        # "Le clochar<d>",
        # "Le radin",
        # "Le séduisant",
        # "Le décontracté",
        # "L'insaisissable",
        # "L'incendiaire",
        # "L'agent provocateur",
        # "Le casse-pie<ds>",
        # "L'agaçant",
        # "Le fatigant",
        # "Le pénible",
        # "Le misant<h>rope",
        # "Le bourgeois gentil<h>omme - Comédie-ballet de Molière",
        # "Le retardataire",
        # "L'expéditeur",
        # "Le destinataire",
        # "Le bénéficiare",
        # "Le chef de clan",
        # "Le mercenaire",
        # "Le condescendant",
        # "Le bavar<d> (comme une pie), le moulin | à paroles",
        # "Le maladif/chétif",
        # "Le glouton",
        # "Le gourman<d>",
        # "L'écervelé",
        # "Le rusé",
        # "Le parvenu",
        # "L'excentrique",
        # "L'exténué",
        # "Le taquin",
        # "Le misogyne beauf",
        # "Le pyromane",
        # "La rouille",
        # "Le détenteur du titre",
        # "Le coupable",
        # "Le timbré",
        # "Le balayeur",
        # "Le grassouillet",
        # "Le maigrichon",
        # "Le qui parle d'une manière affectée",
        # "Le qui se mêle de tout",
        # "Le qui ronfle fort/bruyamment",
        # "Le qui claque des doi<gts>",
        # "Le qui se gratte le visage",
        # "L'homme des cavernes",
        # "Christophe Colomb - colon, capitaine, adventurier",
        # "Johnny Hallyday - Le rock",
        # "Platon - Le Banquet",
        # "Jean Renoir - La règle du jeu",
        # "Arthur Rimbaud - Le Bateau ivre",
        # "Gustave Flaubert - Madame Bovary",
        # "André Malraux - La Condition <H>umaine",
        # "Alain Delon - Le Samouraï",
        # "Jules Verne I - Le voyage au centre de la Terre",
        # "Jules Verne II - Le tour du monde en quatre-vingts jours",
        # "Guy de Maupassant I - La parure (cette nouvelle est connu pour retournement final)",
        # "Guy de Maupassant II - Boule de suif",
        # "Alexandre Dumas père - Le Comte de Monte-Cristo",
        # "Alexandre Dumas fils - La Dame aux camélias",
        # "Francis Poulenc - Concert champêtre",
        # "Henri Matisse - Papier découpé",
        # "Ingre<s> - La Grande Odalisque",
        # "Nicolas Poussin - L'Enlèvement des Sabines",
        # "Caravage - La nature morte",
        # "Léonard de Vinci - L'Homme de Vitruve",
        # "Thierry Hermès - La marque de luxe française qui porte son nom",
        # "Jean Cocteau - Orphée",
        # "Romain Rollan<d> - Jean-Christophe",
        # "Bourvil - La Grande Vadrouille",
        # "Les Grandes Espérances",
        # "Révolution de Juillet porte sur le trône un nouveau roi, Louis-Philippe Ier - Trois Glorieuses - La Liberté guidant le peuple",
        # "Le Printemps - Grand magasin",
        # "Les Galeries Lafayette <H>aussmann[Osman] - Le boulevard <H>aussmann",
        # "Georges-Eugène <H>aussmann[Osman] - transformations de Paris sous le 2d(<t) Em>pire: espaces ver<ts>, mobilier urbain, égou<ts>",
    ]
}

def patch_villager_names(VERSION_TO_BE_PATCHED = '1.21.1'):
    print('##################################################')
    print('Patching Villager Names...')
    REPLACE_PATH = expanduser(
        f"~/curseforge/minecraft/Instances/{VERSION_TO_BE_PATCHED}/config/collective/entity_names.json")

    # Change configuration
    content = None
    with open(expanduser(f"~/curseforge/minecraft/Instances/{VERSION_TO_BE_PATCHED}/config/villagernames.json5"), 'r+', encoding='utf-8') as f:
        content = f.read()
        content = sub('(?<="shouldCapitalizeNames": ).*', 'false', content)
        # print(content)
    with open(expanduser(f"~/curseforge/minecraft/Instances/{VERSION_TO_BE_PATCHED}/config/villagernames.json5"), 'w', encoding='utf-8') as f:
        f.write(content)

    open(REPLACE_PATH, 'w', encoding='utf-8').write(dumps(OUT, indent=2))


if __name__ == '__main__':
    patch_villager_names()